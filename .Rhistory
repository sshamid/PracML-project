commit_activity <- data.frame(content(req3))
str(commit_activity)
?content
commit_activity <- content(req3)
type(commit_activity)
require(jsonlite)
json2 <- jsonlite::fromJSON(toJSON(commit_activity))
json2[1, 1:4]
head(json2)
head(json2$days)
lapply(json2$days,sum)
lapply(list(json2$days),sum)
lapply(json2[['days']],sum)
json2[['days']]
json2[['days']]
install.packages("mass")
install.packages("MASS")
head(mass)
head(MASS)
head(shuttle)
data(shuttle)
?shuttle
??shuttle
dataset(shuttle)
head(MASS)
swirl()
library(swirl)
swirl()
ravenData
glm(ravenWinNum ~ ravenScore, binomial, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial, data=ravenData)
lodds<-  predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
shuttle
require(MASS)
shuttle
fit <- glm(use ~ wind, family='binomial', shuttle)
exp(fit$coeff)
fit2 <- glm(use ~ wind+mgn, family='binomial', shuttle)
#odds
exp(fit2$coeff)
fit2 <- glm(use ~ wind+magn, family='binomial', shuttle)
#odds
exp(fit2$coeff)
fit2 <- glm(use ~ wind + as.factor(magn), family='binomial', shuttle)
#odds
exp(fit2$coeff)
fit3 <- glm(1-use ~ wind + as.factor(magn), family='binomial', shuttle)
#odds
exp(fit3$coeff)
fit3 <- glm(1-use ~ wind, family='binomial', shuttle)
fit3 <- glm(1-as.factor(use) ~ wind, family='binomial', shuttle)
fit3 <- glm(use ~ wind-1, family='binomial', shuttle)
#odds
exp(fit3$coeff)
fit <- glm(use ~ wind, family='binomial', shuttle)
#odds
exp(fit$coeff)
fit3 <- glm(use ~ wind, family='binomial', shuttle)
#odds
1/exp(fit3$coeff)
data(InsectSprays)
outp <- exp(coef(glm(count ~ as.factor(spray) - 1, family="poisson", InsectSprays)))
outp
outp[1]/outp[2]
?offset
log(10)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
# y = c + d1 * x + d2 * x
summary(lm(y ~ d1*x))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
# y = c + d1 * x + d2 * x
summary(lm(y ~ d1*x))
x <- 0:5
y <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
# y = c + d1 * x + d2 * x
summary(lm(y ~ x))
x <- 1:5
y <- c(0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
# y = c + d1 * x + d2 * x
summary(lm(y ~ x))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
# y = c + d1 * x + d2 * x
summary(lm(y ~ d1*x))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
# y = c + d1 * x + d2 * x
fit6 <- lm(y ~ d1*x)
predict(fit6)
glm(formula = 1-use ~ factor(wind), family='binomial', shuttle)
glm((1-shuttle$use)~shuttle$wind,family="binomial")
shuttle1<-shuttle
levels(shuttle1$use)[1]<-"1"
levels(shuttle1$use)[2]<-"0"
shuttle1$use<-as.numeric(as.character(shuttle1$use))
LogiRegUseMinus<-glm((1-shuttle$use)~shuttle$wind,family="binomial")
glm(formula = 1-use ~ factor(wind), family = binomial(logit), data = shuttle1)
glm(use ~ wind, family='binomial', shuttle)
glm((1-shuttle$use)~shuttle$wind,family="binomial")
glm((1-shuttle1$use)~shuttle1$wind,family="binomial")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
head(adData)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(ggplot2)
qplot(CompressiveStrength, data = training)
head(training)
library(Hmisc)
cutCS <- cut2(training$CompressiveStrength, g=3)
table(cutCS)
plot(CompressiveStrength, data = training)
plot(training$CompressiveStrength)
cutCS <- cut2(training$CompressiveStrength, g=4)
qplot(training$CompressiveStrength, colour = cutCS)
qplot(CompressiveStrength, colour = cutCS, data = training)
plot(training$CompressiveStrength, colour = cutCS)
cutCS <- cut2(training$CompressiveStrength, g=4)
table(cutCS)
library(Hmisc)
tail(training)
qplot(training$CompressiveStrength)
qplot(training$Index,training$CompressiveStrength)
plot(training$CompressiveStrength)
?plot
?qplot
head(training$CompressiveStrength)
training$CompressiveStrength
qplot(y=training$CompressiveStrength)
qplot(y=CompressiveStrength, data = training, colour=age)
qplot(y=CompressiveStrength, data = training, colour=Age)
qplot(y=CompressiveStrength, data = training, colour=FlyAsh)
qplot(y=CompressiveStrength, data = training, colour=cutCS)
hist(training$SuperPlasticizer)
hist(as.numeric(training$SuperPlasticizer))
hist(as.numeric(training$SuperPlasticizer), breaks = 10)
?hist
barplot(as.numeric(training$SuperPlasticizer))
barplot(training$SuperPlasticizer)
barplot(as.factor(training$SuperPlasticizer))
qplot(SuperPlasticizer, data = training, geom = "density")
names(training)
qplot(Superplasticizer, data = training, geom = "density")
hist(Superplasticizer, data = training)
hist(training$Superplasticizer)
plot(training$Superplasticizer)
plot(y=training$Superplasticizer)
qplot(y=Superplasticizer, data = training)
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
qplot(log10(Superplasticizer), data = training, geom = "density")
hist(log10(training$Superplasticizer))
mean(training$Superplasticizer)
sd(training$Superplasticizer)
head(training$Superplasticizer)
log10(head(training$Superplasticizer))
ILs <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ILs, method='pca', thresh = 0.8, outcome = training$diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILs <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ILs, method='pca', thresh = 0.8, outcome = training$diagnosis)
preProc
model1 <- train(ILs, testing$diagnosis, method='glm')
model2 <- preProcess(ILs, method='pca', thresh = 0.8, outcome = testing$diagnosis)
model1 <- train(ILs, testing$diagnosis, method='glm')
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILs <- training[,grep('^IL', x = names(training) )]
model1 <- train(ILs, testing$diagnosis, method='glm')
ILstesting <- training[,grep('^IL', x = names(testing) )]
model1 <- train(ILstesting, testing$diagnosis, method='glm')
model2 <- preProcess(ILstesting, method='pca', thresh = 0.8, outcome = testing$diagnosis)
ILstesting <- testing[,grep('^IL', x = names(testing) )]
model1 <- train(ILstesting, testing$diagnosis, method='glm')
model2 <- preProcess(ILstesting, method='pca', thresh = 0.8, outcome = testing$diagnosis)
ILstesting <- testing[,grep('^IL', x = names(testing) )]
model1 <- train(ILstesting, testing$diagnosis, method='glm')
model2
confusionMatrix(testing$diagnosis, model2)
model1 <- train(diagnosis~., method='glm', data=training)
predictions <- predict(model1, newdata=testing)
confusionMatrix(predictions, testing$diagnosis)
model1 <- train(diagnosis~., method='glm', data=training)
library(Hmisc)
model1 <- train(diagnosis~., method='glm', data=training
)
install.packages("e1071")
model1 <- train(diagnosis~., method='glm', data=training)
predictions <- predict(model1, newdata=testing)
confusionMatrix(predictions, testing$diagnosis)
model2 <- train(training$diagnosis~., method='glm', preProcess = "pca", data=training, trControl=
trainControl(preProcOptions = list(thresh =0.8)))
confusionMatrix(testing$diagnosis, predict(model2, testing))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
model1 <- train(diagnosis~., method='glm', data=training)
predictions <- predict(model1, newdata=testing)
confusionMatrix(predictions, testing$diagnosis)
trainingILs < training[,grep('^IL', x = names(training) )]
trainingILs <- training[,grep('^IL', x = names(training) )]
model1 <- train(diagnosis~., method='glm', data=trainingILs)
model1 <- train(trainingILs$diagnosis, method='glm', data=trainingILs)
model1 <- train(trainingILs$diagnosis~., method='glm', data=trainingILs)
head(trainingILs)
head(training)
model1 <- train(trainingILs, method='glm')
model1 <- train(trainingILs, method='glm', outcome = training$diagnosis)
trainingILs <- training[,grep('^IL','diag', x = names(training) )]
head(trainingILs)
trainingILs <- training[,grep('^IL','^diag', x = names(training) )]
head(trainingILs)
trainingILs <- training[,grep('^IL' && '^diag', x = names(training) )]
?grep
trainingILs <- training[,grep(c('^IL', '^diag'), x = names(training) )]
head(trainingILs)
trainingILs <- training[,grep(c('IL', 'diag'), x = names(training) )]
head(trainingILs)
trainingILs <- training[,grep( 'diag', x = names(training) )]
head(trainingILs)
head(training$diagnosis)
?train
head(adData)
head(adData$diagnosis)
head(adData$predictos)
head(adData$predictors)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
names(adData)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
names(training)
names(testing)
?createdatapartition
?createDataPartition
rgamma(50, 3, .5)
dim(adData)
dim(inTrain)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
dim(inTrain)
dim(training)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)
dim(inTrain)
dim(trainingILS)
dim(trainingILs)
trainingILs <- training[,grep( 'diag', x = names(training) )]
dim(trainingILs)
training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingILs <- training[,grep( 'diag', x = names(training) )]
dim(trainingILs)
dim(training)
model1 <- train(trainingILs, method='glm', outcome = trainingILs$IL_11)
trainingILs <- training[,grep( c('diag',"IL"), x = names(training) )]
trainingILs <- training[,grep( c('diag',"^IL"), x = names(training) )]
trainingILs <- training[, grep( 'diag|IL', names(training) )]
head(trainingILs)
model1 <- train(trainingILs, method='glm', outcome = trainingILs$diagnosis)
trainingILs <- training[, grep( 'diag|^IL', names(training) )]
head(trainingILs)
model1 <- train(trainingILs, method='glm', outcome = trainingILs$diagnosis)
model1 <- train(trainingILs$diagnosis~., method='glm')
model1 <- train(trainingILs$diagnosis~., method='glm', data=trainingILs)
predictions <- predict(model1, newdata=testing)
confusionMatrix(predictions, testing$diagnosis)
model2 <- train(trainingILs$diagnosis~., method='glm', preProcess = "pca", data=trainingILs, trControl=
trainControl(preProcOptions = list(thresh =0.8)))
confusionMatrix(testing$diagnosis, predict(model2, testing))
predictions <- predict(model1, newdata=testing)
confusionMatrix(testing$diagnosis, predictions)
predictorsILs <- predictors[, grep( '^IL', names(adData) )]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
df <- data.frame(diagnosis, predictorsILs)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
model1 <- train(training$diagnosis~., method='glm', data=training)
predictions <- predict(model1, newdata=testing)
confusionMatrix(testing$diagnosis, predictions)
set.seed(3433)
predictorsILs <- predictors[, grep( '^IL', names(adData) )]
df <- data.frame(diagnosis, predictorsILs)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
model1 <- train(training$diagnosis~., method='glm', data=training)
predictions <- predict(model1, newdata=testing)
confusionMatrix(testing$diagnosis, predictions)
set.seed(3433)
predictorsILs <- predictors[, grep( '^IL', colnames(adData) , value = TRUE)]
df <- data.frame(diagnosis, predictorsILs)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
model1 <- train(training$diagnosis~., method='glm', data=training)
predictions <- predict(model1, newdata=testing)
confusionMatrix(testing$diagnosis, predictions)
model2 <- train(training$diagnosis~., method='glm', preProcess = "pca", data=training, trControl=
trainControl(preProcOptions = list(thresh =0.8)))
confusionMatrix(testing$diagnosis, predict(model2, testing))
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
library(rpart.plot)
library(randomForest)
set.seed(137)
setwd("~/datasciencecoursera/PracticalMachineLearning/project")
training_data <- read.csv(training_file, na.strings=c("NA",""), header=TRUE )
eval_data <- read.csv(testing_file, na.strings=c("NA",""), header=TRUE )
training_var <- colnames(training_data)
testing_var <- colnames(eval_data)
training_file <- "pml-training.csv"
testing_file <- "pml-testing.csv"
training_data <- read.csv(training_file, na.strings=c("NA",""), header=TRUE )
eval_data <- read.csv(testing_file, na.strings=c("NA",""), header=TRUE )
training_var <- colnames(training_data)
testing_var <- colnames(eval_data)
nav <- sapply(colnames(training_data), function(x) if(sum(is.na(training_data[, x])) > 0.9*nrow(training_data)){return(T)}else{return(F)})
training_data <- training_data[, !nav]
dim(training_data)
nsv <- nearZeroVar(training_data, saveMetrics = T)
training_data <- training_data[, !nsv$nzv]
training_data <- training_data[,7:ncol(training_data)]
dim(training_data)
set.seed(137)
ids_small <- createDataPartition(y=training_data$classe, p=0.25, list=FALSE)
df_small1 <- training_data[ids_small,]
df_remainder <- training_data[-ids_small,]
set.seed(137)
ids_small <- createDataPartition(y=df_remainder$classe, p=0.33, list=FALSE)
df_small2 <- df_remainder[ids_small,]
df_remainder <- df_remainder[-ids_small,]
set.seed(137)
ids_small <- createDataPartition(y=df_remainder$classe, p=0.5, list=FALSE)
df_small3 <- df_remainder[ids_small,]
df_small4 <- df_remainder[-ids_small,]
# Divide each of these 4 sets into training (60%) and test (40%) sets.
set.seed(137)
inTrain <- createDataPartition(y=df_small1$classe, p=0.6, list=FALSE)
df_small_training1 <- df_small1[inTrain,]
df_small_testing1 <- df_small1[-inTrain,]
set.seed(137)
inTrain <- createDataPartition(y=df_small2$classe, p=0.6, list=FALSE)
df_small_training2 <- df_small2[inTrain,]
df_small_testing2 <- df_small2[-inTrain,]
set.seed(137)
inTrain <- createDataPartition(y=df_small3$classe, p=0.6, list=FALSE)
df_small_training3 <- df_small3[inTrain,]
df_small_testing3 <- df_small3[-inTrain,]
set.seed(137)
inTrain <- createDataPartition(y=df_small4$classe, p=0.6, list=FALSE)
df_small_training4 <- df_small4[inTrain,]
df_small_testing4 <- df_small4[-inTrain,]
set.seed(137)
modFit <- train(df_small_training1$classe ~ ., data = df_small_training1, method="rpart")
print(modFit, digits=3)
print(modFit$finalModel, digits=3)
predictions <- predict(modFit, newdata=df_small_testing1)
print(confusionMatrix(predictions, df_small_testing1$classe), digits=4)
modFit <- train(df_small_training1$classe ~ .,  preProcess=c("center", "scale"), data = df_small_training1, method="rpart")
predictions <- predict(modFit, newdata=df_small_testing1)
print(confusionMatrix(predictions, df_small_testing1$classe), digits=4)
set.seed(137)
modFit <- train(df_small_training1$classe ~ .,  trControl=trainControl(method = "cv", number = 4), data = df_small_training1, method="rpart")
predictions <- predict(modFit, newdata=df_small_testing1)
print(confusionMatrix(predictions, df_small_testing1$classe), digits=4)
modFit <- train(df_small_training1$classe ~ .,  preProcess=c("center", "scale"), trControl=trainControl(method = "cv", number = 4), data = df_small_training1, method="rpart")
predictions <- predict(modFit, newdata=df_small_testing1)
print(confusionMatrix(predictions, df_small_testing1$classe), digits=4)
set.seed(137)
modFit <- train(df_small_training1$classe ~ ., method="rf", trControl=trainControl(method = "cv", number = 4), data=df_small_training1)
print(predict(modFit, newdata=eval_data))
predictions <- predict(modFit, newdata=df_small_testing1)
print(confusionMatrix(predictions, df_small_testing1$classe), digits=4)
modFit <- train(df_small_training1$classe ~ ., method="rf", data=df_small_training1)
training_file <- "pml-training.csv"
if (!file.exists(training_file)){
dataUrl_training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(url=dataUrl_training, training_file, method="curl")
}
testing_file <- "pml-testing.csv"
if (!file.exists(testing_file)){
dataUrl_testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url=dataUrl_testing, testing_file, method="curl")
}
training_data <- read.csv(training_file, na.strings=c("NA",""), header=TRUE )
eval_data <- read.csv(testing_file, na.strings=c("NA",""), header=TRUE )
training_var <- colnames(training_data)
testing_var <- colnames(eval_data)
# Verify that the column names (excluding classe and problem_id) are identical in the training and # test set.
all.equal(training_var[1:length(training_var)-1], testing_var[1:length(testing_var)-1])
dim(training_data)
nav <- sapply(colnames(training_data), function(x) if(sum(is.na(training_data[, x])) > 0.9*nrow(training_data)){return(T)}else{return(F)})
training_data <- training_data[, !nav]
dim(training_data)
nsv <- nearZeroVar(training_data, saveMetrics = T)
training_data <- training_data[, !nsv$nzv]
nsv
training_data <- training_data[,7:ncol(training_data)]
dim(training_data)
set.seed(137)
inTrain <- createDataPartition(y=training_data$classe, p=0.6, list=FALSE)
training <- training_data[inTrain,]
testing <- training_data[-inTrain,]
set.seed(137)
modFit <- train(training$classe ~ ., data = training, method="rpart")
predictions <- predict(modFit, newdata=testing)
print(confusionMatrix(predictions, testing$classe), digits=4)
confusionMatrix(predictions, testing$classe)
confusionMatrix(predictions, testing$classe)$Overall Statistics
confusionMatrix(predictions, testing$classe)$Accuracy
cm <- confusionMatrix(predictions, testing$classe)
names(cm)
cm$overall
cm$overall[[1]]
print(cm, digits=4)
set.seed(137)
modFit <- train(training$classe ~ .,  preProcess=c("center", "scale"), trControl=trainControl(method = "cv", number = 4), data = training, method="rpart")
predictions <- predict(modFit, newdata=testing)
cm2 <- confusionMatrix(predictions, df_small_testing1$classe)
print(cm2, digits=4)
predictions <- predict(modFit, newdata=testing)
cm2 <- confusionMatrix(predictions, testing$classe)
print(cm2, digits=4)
print(modFit, digits=3)
names(modFit, digits=3)
names(modFit)
modFit$results
modFit$results[1,2]
modFit <- train(training$classe ~ ., method="rf", preProcess=c("center", "scale"), trControl=trainControl(method = "cv", number = 4), data=training)
print(modFit, digits=3)
predictions <- predict(modFit, newdata=testing)
cm2 <- confusionMatrix(predictions, testing$classe)
print(cm2, digits=4)
predictions <- predict(modFit, newdata=testing)
cm3 <- confusionMatrix(predictions, testing$classe)
print(cm3, digits=4)
print(predict(modFit, newdata=eval_data))
cm3$results
names(cm3)
cm3$overall[[1]]
